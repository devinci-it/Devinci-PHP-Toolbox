<?php

namespace Devinci\DatabaseCore;

use Devinci\Utilities\Logger\Logger;
use Devinci\DatabaseCore\Database\Database;

class ScriptHandler
{
    /**
     * Executes custom setup tasks during Composer events.
     *
     * @return void
     */
    public static function setup()
    {
        // Load configuration from composer.json
        $config = json_decode(file_get_contents(__DIR__ . '/../../composer.json'), true);
        $dbConfig = isset($config['extra']['devinci-script-params']['dbConfig'])
            ? $config['extra']['devinci-script-params']['dbConfig']
            : [];

        // Example usage:
        $logger = new Logger(__DIR__ . '/../../logs/db_setup.log');
        $logger->log('Starting custom setup tasks...');

        // Create includes folder if not present
        $includesDirectory = __DIR__ . '/../../includes';
        if (!file_exists($includesDirectory)) {
            mkdir($includesDirectory, 0755, true);
            $logger->log('Created includes folder.');
        }

        // Create db.config.php in includes folder
        $configFilePath = $includesDirectory . '/db.config.php';
        if (!file_exists($configFilePath)) {
            file_put_contents($configFilePath, '<?php' . PHP_EOL . PHP_EOL);
            foreach ($dbConfig as $key => $value) {
                $key=strtoupper($key);
                file_put_contents($configFilePath, "const $key = '$value';" . PHP_EOL, FILE_APPEND);
            }

            // Set file permissions to allow only the owner to read and write
            chmod($configFilePath, 0600);

            $logger->log('db.config.php created successfully in includes folder.');
        } else {
            $logger->log('db.config.php already exists in includes folder.');
        }

        // Append to main composer.json for autoloading
        self::appendToComposerAutoload();

        // Set up .htaccess for privacy and security
        self::setupHtaccess();

        $scriptFilePath = __DIR__ . '/../../includes/setup_database.sh';
        self::generateDatabaseSetupScript($scriptFilePath, $dbConfig);

        $logger->log("Shell script for database setup generated: $scriptFilePath");

        $setupScriptExecuted = self::executeDatabaseSetupScript($logger);

        // Attempt a connection using the information from db.config.php
        $database = new Database($dbConfig, $logger);
        $connected = $database->connect();


        if ($connected){
            $logger->log('Connection Successful');
        }

        self::autoloadConfig();

        $logger->log('Custom setup tasks completed.');
    }

    private static function executeDatabaseSetupScript(Logger $logger)
    {
        $setupScriptPath = __DIR__ . '/../../includes/setup_database.sh';

        // Check if the setup script exists
        if (file_exists($setupScriptPath)) {
            $logger->log('Executing database setup script...');

            // Execute the setup script
            exec($setupScriptPath, $output, $exitCode);

            if ($exitCode === 0) {
                $logger->log('Database setup script executed successfully.');
                return true;
            } else {
                $logger->log('Failed to execute database setup script.');
            }
        } else {
            $logger->log('Database setup script not found.');
        }

        return false;
    }


    private static function generateDatabaseSetupScript($scriptFilePath, $dbConfig)
    {
        $scriptContent = "#!/bin/bash\n";
        $scriptContent .= "# Script generated by Devinci DatabaseCore Setup Script\n\n";
        $scriptContent .= "MYSQL_USER=\"{$dbConfig['username']}\"\n";
        $scriptContent .= "MYSQL_PASSWORD=\"{$dbConfig['password']}\"\n";
        $scriptContent .= "MYSQL_DATABASE=\"{$dbConfig['database']}\"\n";

// Check if MYSQL_ROOT_PASSWORD is set, otherwise use a default value or leave it empty
        $mysqlRootPassword = isset($dbConfig['rootPassword']) ? $dbConfig['rootPassword'] : 'your_default_root_password';
        $scriptContent .= "MYSQL_ROOT_PASSWORD=\"$mysqlRootPassword\"\n\n";
        $scriptContent .= "MYSQL_DATABASE=\"{$dbConfig['database']}\"\n";
        $scriptContent .= "mysql -u root -p\"\$MYSQL_ROOT_PASSWORD\" -e \"CREATE DATABASE IF NOT EXISTS \$MYSQL_DATABASE;\"\n";
        $scriptContent .= "mysql -u root -p\"\$MYSQL_ROOT_PASSWORD\" -e \"GRANT ALL PRIVILEGES ON \$MYSQL_DATABASE.* TO '\$MYSQL_USER'@'%' IDENTIFIED BY '\$MYSQL_PASSWORD';\"\n";
        $scriptContent .= "mysql -u root -p\"\$MYSQL_ROOT_PASSWORD\" -e \"FLUSH PRIVILEGES;\"\n";

        // Write the script to the specified file
        file_put_contents($scriptFilePath, $scriptContent);

        // Set file permissions to allow execution
        chmod($scriptFilePath, 0755);
    }



    /**
     * Autoload the db.config.php file.
     *
     * @return void
     */
    private static function autoloadConfig()
    {
        $configFilePath = __DIR__ . '/../../includes/db.config.php';

        if (file_exists($configFilePath)) {
            $config = include $configFilePath;

            if (is_array($config)) {
                foreach ($config as $key => $value) {
                    // Make the configuration variables global
                    putenv("$key=$value");
                }
            }
        }
    }

    /**
     * Append to main composer.json for autoloading.
     *
     * @return void
     */
    private static function appendToComposerAutoload()
    {
        $composerFilePath = __DIR__ . '/../../composer.json';
        $composerData = json_decode(file_get_contents($composerFilePath), true);

        // Add "autoload" => {"files": ["includes/db.config.php"]} to composer.json
        if (!isset($composerData['autoload']['files'])) {
            $composerData['autoload']['files'] = [];
        }

        if (!in_array("includes/db.config.php", $composerData['autoload']['files'])) {
            $composerData['autoload']['files'][] = "includes/db.config.php";
        }

        // Write back to composer.json
        file_put_contents($composerFilePath, json_encode($composerData, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
    }

    /**
     * Set up .htaccess for privacy and security.
     *
     * @return void
     */
    private static function setupHtaccess()
    {
        $htaccessFilePath = __DIR__ . '/../../includes/.htaccess';

        if (!file_exists($htaccessFilePath)) {
            $htaccessContent = "# Generated by Devinci DatabaseCore Setup Script\n";
            $htaccessContent .= "Order Deny,Allow\n";
            $htaccessContent .= "Deny from all\n";

            // Write .htaccess content
            file_put_contents($htaccessFilePath, $htaccessContent);

            // Set file permissions to allow only the owner to read and write
            chmod($htaccessFilePath, 0600);

            $logger = new Logger(__DIR__ . '/../../logs/db_setup.log');
            $logger->log('.htaccess created successfully in includes folder.');
        }
    }
}
